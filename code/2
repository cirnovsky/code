#include <stdio.h>

#define N	3000
#define MD	998244353

int min(int i, int j)
{
	return i < j ? i : j;
}

int ds[N], cnt[N], tot[N];

int find(int i)
{
	while (i != ds[i])
		i = ds[i] = ds[ds[i]];
	return i;
}

void join(int i, int j)
{
	i = find(i);
	j = find(j);
	if (i != j) {
		tot[j] += tot[i];
		cnt[j] += cnt[i] + 1;
		ds[i] = j;
	}
}

int vv[N + 1], ff[N + 1], gg[N + 1];

void init(int n)
{
	int i;

	ff[0] = gg[0] = 1;
	for (i = 1; i <= n; ++i) {
		vv[i] = i == 1 ? 1 : (long long) vv[i - MD % i] * (MD / i + 1) % MD;
		ff[i] = (long long) ff[i - 1] * i % MD;
		gg[i] = (long long) gg[i - 1] * vv[i] % MD;
	}
}

int choose(int n, int k)
{
	return (long long) ff[n] * gg[k] % MD * gg[n - k] % MD;
}

int solve(int b, int w, int g)
{
	int res = 0;
	int s, w_, b_;

	for (s = 0; s <= min(b, w); ++s) {
		int s0 = 0, s1 = 0;
		for (b_ = s; b_ <= b; ++b_) {
			if (g + s - b_ < 0)
				break;
			int tmp = 1;

			if (b || b_)
				tmp = (long long) ff[b] * choose(b - 1, b_ - 1) % MD * gg[b_] % MD;
			s0 += (long long) tmp * choose(b_, s) * ff[g] % MD * gg[g + s - b_];
		}
		for (w_ = s; w_ <= w; ++w_) {
			if (g + s - w_ < 0)
				break;
			int tmp = 1;

			if (w || w_)
				tmp = (long long) ff[w] * choose(w - 1, w_ - 1) % MD * gg[b_];
			s1 += (long long) tmp * ff[w_] % MD * gg[w_ - s] % MD * ff[g + s] % MD * gg[g + s - w_] % MD;
		}
		res = (res + (long long) ff[g] * s0 % MD * s1 % MD) % MD;
	}
	return res;
}

int main()
{
	freopen("in.txt", "r", stdin);
	int n, yes = 1;
	int i, j;
	static int aa[N], bb[N];
	static int used[N];

	scanf("%d", &n);
	for (i = 0; i < n; ++i)
		scanf("%d", aa + i);
	for (i = 0; i < n; ++i)
		scanf("%d", bb + i);
	init(n);

	for (i = 0; i < n; ++i) {
		ds[i] = i;
		tot[i] = 1;
	}
	for (i = 0; i < n; ++i) {
		if (used[(aa[i] - 1) / 2])
			yes = 0;
		used[(aa[i] - 1) / 2] = 1;
		for (j = 0; j < n; ++j)
			if (i != j && bb[j] > aa[i] && (bb[j] - 1) / 2 == (aa[i] - 1) / 2)
				join(i, j);
	}

	int b = 0, w = 0, g = 0;
	for (i = 0; i < n; ++i) {
		int cnt0 = 0, cnt1 = 0;

		if (find(i) != i)
			continue;
		for (j = 0; j < n; ++j)
			if (find(i) == find(j)) {
				if (aa[j] % 2 == 0)
					cnt0++;
				else
					cnt1++;
			}
		if (cnt[find(i)] == tot[find(i)] && cnt0 * cnt1 == 0)
			yes = 0;
		else if (cnt[find(i)] != tot[find(i)]) {
			if (cnt0 == 0)
				b++;
			else if (cnt1 == 0)
				w++;
			else
				g++;
		}
	}

	printf(" -- %d %d %d\n", b, w, g);

	if (!yes)
		puts("0");
	else
		printf("%d\n", solve(b, w, g));
	return 0;
}
